1. Start the Minikube Cluster
bash
Copy
Edit
minikube start --driver=docker
2. Create the Pod with Proper Startup Arguments
bash
Copy
Edit
kubectl run hello-node --image=hashicorp/http-echo --restart=Always --port=8080 -- -text="Hello from Kubernetes!" -listen=:8080
3. Expose the Pod (or Deployment) as a Service
bash
Copy
Edit
kubectl expose pod hello-node --type=ClusterIP --port=8080
If the above doesn’t work, use this (in case a Deployment was created):

bash
Copy
Edit
kubectl expose deployment hello-node --type=ClusterIP --port=8080
4. Forward the Port to Access the App in Browser
bash
Copy
Edit
kubectl port-forward service/hello-node 8080:8080
Open this in browser:

arduino
Copy
Edit
http://localhost:8080
You’ll see:

csharp
Copy
Edit
Hello from Kubernetes!
5. Clean Up Resources (When Done)
bash
Copy
Edit
kubectl delete service hello-node
kubectl delete pod hello-node
If you used a deployment instead of a pod:

bash
Copy
Edit
kubectl delete deployment hello-node
 


 #### Working


varun@LAPTOP-19ISMTVG>minikube start --driver=docker
* minikube v1.36.0 on Microsoft Windows 11 Home Single Language 10.0.26100.4351 Build 26100.4351
* Using the docker driver based on user configuration
* Using Docker Desktop driver with root privileges
* Starting "minikube" primary control-plane node in "minikube" cluster
* Pulling base image v0.0.47 ...
* Downloading Kubernetes v1.33.1 preload ...
    > preloaded-images-k8s-v18-v1...:  347.04 MiB / 347.04 MiB  100.00% 2.66 Mi
    > gcr.io/k8s-minikube/kicbase...:  502.26 MiB / 502.26 MiB  100.00% 2.61 Mi
* Creating docker container (CPUs=2, Memory=2200MB) ...
! Failing to connect to https://registry.k8s.io/ from inside the minikube container
* To pull new external images, you may need to configure a proxy: https://minikube.sigs.k8s.io/docs/reference/networking/proxy/
* Preparing Kubernetes v1.33.1 on Docker 28.1.1 ...
  - Generating certificates and keys ...
  - Booting up control plane ...
  - Configuring RBAC rules ...
* Configuring bridge CNI (Container Networking Interface) ...
* Verifying Kubernetes components...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
* Enabled addons: storage-provisioner, default-storageclass
* kubectl not found. If you need it, try: 'minikube kubectl -- get pods -A'
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default

varun@LAPTOP-19ISMTVG>minikube status
minikube
type: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured


varun@LAPTOP-19ISMTVG>kubectl get nodes
NAME       STATUS   ROLES           AGE    VERSION
minikube   Ready    control-plane   6m1s   v1.33.1


#### deploying a Pod or app


varun@LAPTOP-19ISMTVG>kubectl run hello-node --image=hashicorp/http-echo --restart=Always --port=8080 -- -text="Hello from Kubernetes!" -listen=:8080
pod/hello-node created

varun@LAPTOP-19ISMTVG>kubectl expose pod hello-node --type=ClusterIP --port=8080
service/hello-node exposed

varun@LAPTOP-19ISMTVG>kubectl port-forward service/hello-node 8080:8080
Forwarding from 127.0.0.1:8080 -> 8080
Forwarding from [::1]:8080 -> 8080
Handling connection for 8080
Handling connection for 8080
